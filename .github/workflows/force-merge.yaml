name: Force Merge PR

on:
  workflow_call:
    secrets:
      ADMIN_PAT:
        description: 'Personal Access Token with repo scope from an admin'
        required: true
      SLACK_WEBHOOK_URL:
        description: 'Slack Webhook URL for notifications'
        required: true

jobs:
  force_merge:
    runs-on: ubuntu-latest
    steps:
      - name: Check and Merge Pull Request
        uses: actions/github-script@v6
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        with:
          github-token: ${{ secrets.ADMIN_PAT }}
          script: |
            const comment = context.payload.comment;
            const issue = context.payload.issue;
            const repo = context.repo;
            const octokit = github;

            // Verify the comment is on a pull request
            if (!issue.pull_request) {
              console.log('Comment is not on a pull request');
              return;
            }

            // Check if the comment is exactly "/force-merge"
            if (comment.body.trim() !== '/force-merge') {
              console.log('Comment is not "/force-merge"');
              return;
            }

            // Check if the commenter is an admin
            const username = comment.user.login;
            const permission = await octokit.rest.repos.getCollaboratorPermissionLevel({
              owner: repo.owner,
              repo: repo.repo,
              username: username
            });

            if (permission.data.permission !== 'admin') {
              console.log(`${username} is not an admin`);
              return;
            }

            // Attempt to merge the pull request
            try {
              await octokit.rest.pulls.merge({
                owner: repo.owner,
                repo: repo.repo,
                pull_number: issue.number,
                commit_title: `Force merge via GitHub Action by ${username}`
              });
              console.log(`PR #${issue.number} merged successfully`);

              // Send Slack notification
              const slackWebhookUrl = process.env.SLACK_WEBHOOK_URL;
              const message = {
                text: `User ${username} force-merged PR #${issue.number} in ${repo.owner}/${repo.repo}`
              };
              await fetch(slackWebhookUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(message)
              });
              console.log('Slack notification sent');
            } catch (error) {
              console.error('Merge failed:', error.message);
              await octokit.rest.issues.createComment({
                owner: repo.owner,
                repo: repo.repo,
                issue_number: issue.number,
                body: `Failed to force-merge the pull request: ${error.message}`
              });
            }
