name: GolangCI

on:
  workflow_call:
    inputs:
      main_branch:
        default: "main"
        type: string
  
jobs:
  golangci:
    runs-on: ubuntu-latest
    steps:
      - name: Git - checkout master
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.main_branch }}
          fetch-depth: 1
      - name: Download template
        run: |
          curl 'https://raw.githubusercontent.com/TykTechnologies/github-actions/main/.github/workflows/.golangci.tmpl.yaml' -o .golangci.yaml
      - name: Render template
        id: render_template
        uses: chuhlomin/render-template@v1.5
        with:
          template: .golangci.yaml
          result_path: .golangci.yaml
          vars: |
            main_branch: ${{ inputs.main_branch }}
            goimports: ''
            build_tags: []
            skip_dirs: []
      - name: Apply template
        run: |
          cp .golangci.yaml /tmp/.golangci.yaml
          if [[ `git status --porcelain` ]]; then
            local ref=$(git rev-parse HEAD)
            git checkout ${{ inputs.main_branch }}
            git config --global user.name 'Bender'
            git config --global user.email 'bender@users.noreply.github.com'
            git add -A
            git commit -a -m 'Update Golangci config'
            git push
            git checkout $ref
          fi
          cp /tmp/.golangci.yaml .golangci.yaml
      - uses: actions/setup-go@v3
        with:
          go-version: 1.17
      - name: golangci-lint
        id: lint
        uses: gessnerfl/golangci-lint-action@master
        continue-on-error: true
        with:
          version: latest

          # golangci-lint command line arguments.
          args: --timeout=5m --verbose

          # If set to true and the action runs on a pull request - the action outputs only newly found issues
          only-new-issues: true
          
          output-file: checkstyle:golangci_lint.xml
      - uses: reviewdog/action-setup@v1
        with:
          reviewdog_version: latest
      - name: Run reviewdog
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TMPFILE=$(mktemp)
          git diff >"${TMPFILE}"
          reviewdog -f=diff -f.diff.strip=1 -reporter=github-pr-review < "${TMPFILE}"
      - name: Check on failures
        if: steps.lint.outputs.status == 'failure'
        run: exit 1

# cat golangci_lint.xml | reviewdog -f=checkstyle -name="Linter" -reporter=github-pr-check
