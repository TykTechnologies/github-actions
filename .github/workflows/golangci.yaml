name: GolangCI

on:
  workflow_call:
    inputs:
      main_branch:
        default: "main"
        type: string
  
jobs:
  golangci:
    runs-on: ubuntu-latest
    steps:
      - name: Git - checkout master
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.main_branch }}
          fetch-depth: 1
      - name: Git - checkout current ref
        uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          # In order:
          # * Module download cache
          # * Build cache (Linux)
          # * Build cache (Mac)
          # * Build cache (Windows)
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
            ~/Library/Caches/go-build
            ~\AppData\Local\go-build
          key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ matrix.go-version }}-
      - name: Download template
        run: |
          curl 'https://raw.githubusercontent.com/TykTechnologies/github-actions/main/.github/workflows/.golangci.tmpl.yaml' -o .golangci.yaml
      - name: Render template
        id: render_template
        uses: chuhlomin/render-template@v1.5
        with:
          template: .golangci.yaml
          result_path: .golangci.yaml
          vars: |
            main_branch: ${{ inputs.main_branch }}
            goimports: ''
            build_tags: []
            skip_dirs: []
      - name: Apply template
        run: |
          cp .golangci.yaml /tmp/.golangci.yaml
          if [[ `git status --porcelain` ]]; then
            export ref=$(git rev-parse HEAD)
            git checkout ${{ inputs.main_branch }}
            git config --global user.name 'Bender'
            git config --global user.email 'bender@users.noreply.github.com'
            git add -A
            git commit -a -m 'Update Golangci config'
            git push
            git checkout $ref
          fi
          cp /tmp/.golangci.yaml .golangci.yaml
      - uses: actions/setup-go@v3
        with:
          go-version: 1.17
      - name: Fetch modules
        run: |
          go mod download
#          gofmt -s -w .
#          git status
      - name: golangci-lint without auto-fix
        id: lint-no-fix
        uses: gessnerfl/golangci-lint-action@master
        continue-on-error: true
        with:
          version: latest

          # golangci-lint command line arguments.
          args: --timeout=5m --verbose

          # If set to true and the action runs on a pull request - the action outputs only newly found issues
          only-new-issues: true
          
          output-file: checkstyle:golangci_lint.xml
#       - name: Disable output variables
#         id: stop_vars
#         run: |
#           export stopMarker=$(uuidgen)
#           echo "::set-output name=stopMarker::$stopMarker"
#           echo "::stop-commands::$stopMarker"
      - name: golangci-lint with auto-fixes
        id: lint-fix
        uses: gessnerfl/golangci-lint-action@master
        continue-on-error: true
        with:
          skip-cache: true
          skip-pkg-cache: true
          skip-build-cache: true
          
          version: latest

          # golangci-lint command line arguments.
          args: --timeout=5m --verbose --fix

          # If set to true and the action runs on a pull request - the action outputs only newly found issues
          only-new-issues: true
          
          output-file: checkstyle:golangci_lint2.xml
#       - name: Re-enable output variables
#         run: |
#           echo "::${{ steps.stop_vars.outputs.stopMarker }}::"
      - uses: reviewdog/action-setup@v1
        with:
          reviewdog_version: latest
      - name: Run reviewdog
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          go install golang.org/x/tools/cmd/goimports@latest
          goimports -w .

          TMPFILE=$(mktemp)
          git diff >"${TMPFILE}"
          git diff
          git status
          
          #-diff="git diff"
          git stash -u && git stash drop
          reviewdog -f=diff -f.diff.strip=1 -reporter=github-pr-review < "${TMPFILE}"
          
#           cat golangci_lint2.xml | reviewdog -f=checkstyle -name="Linter" -reporter=github-pr-review
          
#          cat golangci_lint2.xml | reviewdog -f=checkstyle -name="Linter" -reporter=github-pr-check
      - name: Check on failures
        if: steps.lint-fix.outcome != 'success' || steps.lint-not-fix.outcome != 'success'
        run: exit 1

# cat golangci_lint.xml | reviewdog -f=checkstyle -name="Linter" -reporter=github-pr-check
