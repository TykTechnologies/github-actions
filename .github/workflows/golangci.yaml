name: GolangCI

on:
  workflow_call:
    inputs:
      main_branch:
        default: "main"
        type: string
  
jobs:
  golangci:
    runs-on: ubuntu-latest
    steps:
      - name: Git - checkout master
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.main_branch }}
          fetch-depth: 1
      - name: Git - checkout current ref
        uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          # In order:
          # * Module download cache
          # * Build cache (Linux)
          # * Build cache (Mac)
          # * Build cache (Windows)
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
            ~/Library/Caches/go-build
            ~\AppData\Local\go-build
            ~/.cache/golangci-lint
            ~/Library/Caches/golangci-lint
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Download template
        run: |
          curl 'https://raw.githubusercontent.com/TykTechnologies/github-actions/main/.github/workflows/.golangci.tmpl.yaml' -o .golangci.yaml
      - name: Render template
        id: render_template
        uses: chuhlomin/render-template@v1.5
        with:
          template: .golangci.yaml
          result_path: .golangci.yaml
          vars: |
            main_branch: ${{ inputs.main_branch }}
            goimports: ''
            build_tags: []
            skip_dirs: []
      - name: Apply template
        run: |
          cp .golangci.yaml /tmp/.golangci.yaml
          if [[ `git status --porcelain` ]]; then
            export ref=$(git rev-parse HEAD)
            git checkout ${{ inputs.main_branch }}
            git config --global user.name 'Bender'
            git config --global user.email 'bender@users.noreply.github.com'
            git add -A
            git commit -a -m 'Update Golangci config'
            git push
            git checkout $ref
          fi
          cp /tmp/.golangci.yaml .golangci.yaml
      - uses: actions/setup-go@v3
        with:
          go-version: 1.17
      - name: Fetch modules
        run: |
          go mod download
      - name: Download golangci-lint
        run: curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin

      - name: golangci-lint
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          $(go env GOPATH)/bin/golangci-lint run --out-format checkstyle --timeout=300s --fix --new=true --new-from-rev=origin/${{ github.base_ref }} ./... > golangci_lint.xml
      - name: golangci-lint
        if: ${{ github.event_name == 'push' }}
        run: |
          $(go env GOPATH)/bin/golangci-lint run --out-format checkstyle --timeout=300s --new=false --new-from-rev= --issues-exit-code=0 ./... > golangci_lint.xml

      - uses: actions/upload-artifact@v3
        with:
          name: golangci-report
          path: "*xml"
          
      - name: Run reviewdog
        if: ${{ github.event_name == 'pull_request' }}
        env:
          REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          go install golang.org/x/tools/cmd/goimports@latest
          goimports -w .
          
          cat golangci_lint.xml | reviewdog -f=checkstyle -name="Linter" -reporter=github-pr-review

          TMPFILE=$(mktemp)
          git diff >"${TMPFILE}"
          git diff
          git status
         
          git stash -u && git stash drop
          reviewdog -f=diff -f.diff.strip=1 -name="Linter" -reporter=github-pr-review < "${TMPFILE}"
      - name: Check on failures
        if: steps.lint-fix.outcome != 'success' || steps.lint-not-fix.outcome != 'success'
        run: exit 1

# cat golangci_lint.xml | reviewdog -f=checkstyle -name="Linter" -reporter=github-pr-check
