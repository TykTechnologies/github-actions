name: Cherry-pick to Release Branch

on:
  issue_comment:
    types: [created]
  workflow_call:

jobs:
  cherry_pick:
    runs-on: ubuntu-latest
    steps:
      - name: Check for release command
        id: check_command
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { issue, comment } = context.payload;
            if (!issue || !issue.pull_request || !comment || !comment.body.startsWith('/release to ')) {
              core.setOutput('release_valid', 'false');
              return;
            }
            const releaseBranch = comment.body.split('/release to ')[1].trim();
            core.setOutput('release_valid', 'true');
            core.setOutput('release_branch', releaseBranch);
            core.setOutput('pr_number', issue.number);

      - name: Install GitHub CLI (for act/local testing)
        if: steps.check_command.outputs.release_valid == 'true'
        run: |
          sudo apt update
          sudo apt install -y curl unzip gnupg
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo tee /usr/share/keyrings/githubcli-archive-keyring.gpg >/dev/null
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install -y gh

      - name: Checkout repository
        if: steps.check_command.outputs.release_valid == 'true'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set default branch variable
        if: steps.check_command.outputs.release_valid == 'true'
        run: echo "DEFAULT_BRANCH=${{ github.event.repository.default_branch }}" >> $GITHUB_ENV

      - name: Skip jobs if not a valid release command
        if: steps.check_command.outputs.release_valid == 'false'
        run: echo "Skipping cherry-pick as the release command is not valid."
        continue-on-error: true

      - name: Setup Git
        if: steps.check_command.outputs.release_valid == 'true'
        run: |
          git config --global user.email "bot@tyk.io"
          git config --global user.name "Tyk Bot"

      - name: Get PR base and merge SHAs
        id: pr_details
        if: steps.check_command.outputs.release_valid == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER=${{ steps.check_command.outputs.pr_number }}
          MERGE_COMMIT=$(gh pr view "$PR_NUMBER" --json mergeCommit --jq '.mergeCommit.oid // empty')
          BASE_SHA=$(gh pr view "$PR_NUMBER" --json baseRefOid --jq '.baseRefOid // empty')
          echo "MERGE_COMMIT=$MERGE_COMMIT" >> $GITHUB_ENV
          echo "BASE_SHA=$BASE_SHA" >> $GITHUB_ENV
          echo "MERGE_COMMIT=$MERGE_COMMIT" >> $GITHUB_OUTPUT
          echo "BASE_SHA=$BASE_SHA" >> $GITHUB_OUTPUT

      - name: Cherry-pick PR into release branch
        id: cherry_pick
        if: steps.check_command.outputs.release_valid == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPO: ${{ github.repository }}
          GITHUB_BRANCH: ${{ steps.check_command.outputs.release_branch }}
        run: |
          export FOLDER=$(basename "$GITHUB_REPO")
          rm -rf $FOLDER
          git clone https://x-access-token:$GITHUB_TOKEN@github.com/$GITHUB_REPO
          cd $FOLDER

          git checkout $GITHUB_BRANCH
          git pull

          NEW_BRANCH=merge/$GITHUB_BRANCH/$MERGE_COMMIT
          git branch -D $NEW_BRANCH 2>/dev/null || true
          REMOTE_EXISTS=$(git ls-remote --heads origin $NEW_BRANCH | wc -l)
          [ "$REMOTE_EXISTS" -gt 0 ] && git push origin --delete $NEW_BRANCH || true

          git checkout -b $NEW_BRANCH

          MERGE_FAILED=0
          git cherry-pick -x $BASE_SHA..$MERGE_COMMIT || MERGE_FAILED=$?

          git diff --quiet origin/$GITHUB_BRANCH HEAD && {
            echo "No changes to cherry-pick"
            echo "PR_URL=" >> $GITHUB_OUTPUT
            echo "MERGE_FAILED=0" >> $GITHUB_OUTPUT
            exit 0
          }

          git push origin $NEW_BRANCH --force

          TITLE=$(git log --format=%s -n 1 $MERGE_COMMIT)
          BODY=$(git log --format=%B -n 1 $MERGE_COMMIT)

          PR_URL=$(gh pr create \
            --title "Merging to $GITHUB_BRANCH: $TITLE" \
            --body "$BODY" \
            --repo $GITHUB_REPO \
            --base $GITHUB_BRANCH \
            --head $NEW_BRANCH \
            $( [ "$MERGE_FAILED" -ne 0 ] && echo "--draft" ))

          echo "PR_URL=$PR_URL" >> $GITHUB_OUTPUT
          echo "MERGE_FAILED=$MERGE_FAILED" >> $GITHUB_OUTPUT

          if [ "$MERGE_FAILED" -eq 0 ]; then
            if [[ "$PR_URL" =~ /pull/([0-9]+) ]]; then
              PR_NUMBER="${BASH_REMATCH[1]}"
              gh pr merge --squash "$PR_NUMBER" --auto --subject "Merging to $GITHUB_BRANCH: $TITLE" --body "$BODY" || echo "Auto-merge failed"
            fi
          fi

      - name: Comment back on original PR
        if: steps.check_command.outputs.release_valid == 'true' && always()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prUrl = '${{ steps.cherry_pick.outputs.PR_URL }}';
            const mergeFailed = '${{ steps.cherry_pick.outputs.MERGE_FAILED }}' === '1';
            let body;

            if ('${{ job.status }}' === 'success') {
              if (mergeFailed) {
                body = `⚠️ Cherry-pick completed with conflicts. A draft PR was created: ${prUrl}`;
              } else if (prUrl) {
                body = `✅ Cherry-pick successful. A PR was created and auto-merged (if allowed): ${prUrl}`;
              } else {
                body = `ℹ️ Cherry-pick skipped: no changes needed in target branch.`;
              }
            } else {
              body = '❌ Cherry-pick failed. Please check the workflow logs.';
            }

            github.rest.issues.createComment({
              issue_number: ${{ steps.check_command.outputs.pr_number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
